/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: b302bb7d-c3b1-4e43-bb14-df0905eab5ac
*/
package org.example;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class TrivialissimoTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "10",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 10
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "0",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 0
						)
					)
				),
				/* testCaseName = */ "p2",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "ten",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:value: invalid"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "10.1",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n2",
				/* testCaseDescription = */ "M1:value: invalid"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<String> value;
	    public final Result<TestData, Object, Integer> expectedResult;
		public S1M1Parameters(String value, String referencingMethodName, Result<TestData, Object, Integer> expectedResult) {
			this.value = new ObjectWrapper<>(value, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, Integer> call() {
	    	return i ->
	    	 org.example.Trivialissimo.parsePositiveIntString(value.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
q59gsue/AQpH28IQJgAA
END_CODEGEN_DATA
*/
